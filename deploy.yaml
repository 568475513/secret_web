# k8s 部署文件，除注释表明处外勿擅自修改
# 任何问题，联系基础架构@sparklizhang

kind: Deployment
apiVersion: apps/v1
metadata:
  name: $SERVICE-$BRANCH-v1
  namespace: $NAMESPACE
  labels:
    app: $SERVICE-$BRANCH
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $SERVICE-$BRANCH
      version: v1
  template:
    metadata:
      labels:
        app: $SERVICE-$BRANCH
        version: v1
      annotations:
        kubesphere.io/collectSavedLog: 'true'
        logging.kubesphere.io/logsidecar-config: '{"containerLogConfigs":{"web":{"storage":["**/*log*"],"data":["**/*log*"]}}}'
    spec:
      volumes:
        - name: host-time
          hostPath:
            path: /etc/localtime
            type: ''
        - name: config-volume
          configMap:
            name: $SERVICE-$BRANCH-$CONFIGMAPHASH
        - name: storage
          emptyDir:
            sizeLimit: 1Gi
        - name: data
          emptyDir:
            sizeLimit: 1Gi
      containers:
        - name: web
          image: $REGISTRY/$REGISTRYNAMESPACE/$SERVICE:$BUILDDATE-$COMMITID
          ports:
            - name: web
              containerPort: 9993 # 替换为你的服务监听/启动端口
              protocol: TCP
          resources:
            requests:
              cpu: 40m
              memory: 50Mi
            limits:
              cpu: 400m
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /data  # 日志采集路径,默认采集/data下所有log文件日志，如果你的服务写日志不会创建对应目录，请指定对应的日志路径，或者程序内创建日志文件时检查是否存在目录/路径(推荐)
            - name: storage
              mountPath: app/storage # 日志采集路径，默认采集./storage下所有log文件日志，如果你的服务写日志不会创建对应目录，请指定对应的日志路径，或者程序内创建日志文件时检查是否存在目录/路径(推荐)
            - name: host-time
              readOnly: true
              mountPath: /etc/localtime
            - name: config-volume
              mountPath: app/.env.develop # 替换为配置文件路径
              subPath: .env.develop # 替换为配置文件名称
#          livenessProbe: # 健康检查探针，填写可以返回HTTP状态码200的GET接口，端口为服务监听/启动端口
#            httpGet:
#              path: /health
#              port: 9993
#              scheme: HTTP
#            initialDelaySeconds: 30
#            timeoutSeconds: 1
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 10
#          readinessProbe: # 服务启动就绪探针，填写可以返回HTTP状态码200的GET接口，端口为服务监听/启动端口
#            httpGet:
#              path: /api/health
#              port: 8880
#              scheme: HTTP
#            timeoutSeconds: 1
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 15
          startupProbe:
            exec:
              command:
                - ls
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: default
      serviceAccount: default
      securityContext: {}
      imagePullSecrets:
        - name: registryhub
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

---

kind: Service
apiVersion: v1
metadata:
  name: $SERVICE-$BRANCH
  namespace: $NAMESPACE
  labels:
    app: $SERVICE-$BRANCH
spec:
  ports:
    - name: web
      protocol: TCP
      port: 80
      targetPort: 9993 # 替换为你的服务监听/启动端口
  selector:
    app: $SERVICE-$BRANCH
    version: v1
  type: NodePort
  sessionAffinity: None

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE-$BRANCH
  namespace: $NAMESPACE
  annotations:
    kubernetes.io/ingress.class: apisix
spec:
  rules:
    - host: $SERVICE-$BRANCH.$NAMESPACE.dev.inside.xiaoeknow.com
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: $SERVICE-$BRANCH
                port:
                  number: 80
